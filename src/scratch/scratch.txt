        String output="package models;"
+"\n"
+"\nimport java.io.IOException;"
+"\nimport java.math.BigDecimal;"
+"\nimport java.sql.Connection;"
+"\nimport java.sql.ResultSet;"
+"\nimport java.sql.SQLException;"
+"\nimport java.sql.Statement;"
+"\nimport java.sql.Date;"
+"\nimport java.sql.Timestamp;"
+"\nimport java.util.ArrayList;"
+"\nimport java.util.logging.Level;"
+"\nimport java.util.logging.Logger;"
+"\nimport utils.MySqlDBHelper;"
+"\nimport utils.JsonHelper;"
+"\n"
+"\npublic class [tableCapsPlural] {"
+"\n    //-------------------------TABLE FUNCTIONS---------------------"
+"\n"
+"\n    //-----------getter functions----------"
+"\n    /*"
+"\n    public static [tableCapsPlural] getByName(String name)"
+"\n    {"
+"\n            HashMap<"+iddatatype+",[tableCapsPlural]> map=select(\" name = '\"+name+\"'\");"
+"\n            for([tableCapsPlural] item:map)return item;"
+"\n            return null;"
+"\n    }	"
+"\n    */"
+"\n    public static [tableCapsPlural] getBy"+toCamelCase(idfield)+"("+iddatatype+" "+idfield+") {"
+"\n            RecordList map=select(\" "+idfield+" = '\"+"+idfield+idfieldtypestringifier+"+\"'\");"
+"\n            for([tableCapsPlural] item:map)return item;"
+"\n            return null;"
+"\n    }"
+"\n    //-----------database functions--------------"
+"\n"
+"\n    public static void delete("+iddatatype+" "+idfield+")"
+"\n    {"
+"\n        Connection conn=MySqlDBHelper.getInstance().getConnection();            "
+"\n        Statement st = null;"
+"\n        try { "
+"\n            st = conn.createStatement();"
+"\n            st.executeUpdate(\"delete from \"+tablename+\" where "+idfield+" = '\"+"+idfield+idfieldtypestringifier+"+\"';\");"
+"\n        } catch (SQLException ex) {"
+"\n            Logger.getLogger([tableCapsPlural].class.getName()).log(Level.SEVERE, null, ex);"
+"\n            ex.printStackTrace();"
+"\n        }"
+"\n    }"
+"\n    public static void delete([tableCapsPlural] item)"
+"\n    {"
+"\n        delete(item.get"+toCamelCase(idfield)+"());"
+"\n    }"
+"\n    public static void insert([tableCapsPlural] item)"
+"\n    {"
+"\n        Connection conn=MySqlDBHelper.getInstance().getConnection();            "
+"\n        Statement st = null;"
+"\n        boolean withid=false;"
+"\n        try { "
+"\n            st = conn.createStatement();"
+"\n            //for tables with integer primary key"
+"\n            if(fieldtypes[0].contentEquals(\"integer\"))withid=false;                "
+"\n            //for tables with varchar primary key"
+"\n            else if(fieldtypes[0].contains(\"varchar\"))withid=true;                "
+"\n            st.executeUpdate(\"INSERT INTO \"+tablename+\" (\"+implodeFields(withid)+\")VALUES (\"+implodeValues(item, withid)+\");\");"
+"\n        } catch (SQLException ex) {"
+"\n            Logger.getLogger([tableCapsPlural].class.getName()).log(Level.SEVERE, null, ex);"
+"\n            ex.printStackTrace();"
+"\n        }"
+"\n    }"
+"\n    public static void update([tableCapsPlural] item)"
+"\n    {"
+"\n        Connection conn=MySqlDBHelper.getInstance().getConnection();            "
+"\n        Statement st = null;"
+"\n        boolean withid=false;"
+"\n        try { "
+"\n            st = conn.createStatement();"
+"\n            st.executeUpdate(\"update \"+tablename+\" set \"+implodeFieldsWithValues(item,false)+\" where "+idfield+" = '\"+item.get"+toCamelCase(idfield)+"()"+idfieldtypestringifier+"+\"';\");"
+"\n        } catch (SQLException ex) {"
+"\n            Logger.getLogger([tableCapsPlural].class.getName()).log(Level.SEVERE, null, ex);"
+"\n            ex.printStackTrace();"
+"\n        }"
+"\n    }"
+"\n    public static Integer count(String conditions)"
+"\n    {"
+"\n        if(conditions.isEmpty())conditions = \"1\";"
+"\n"
+"\n        //if conditions contains a limit clause, remove it. "
+"\n        //It is not applicable to a count query"
+"\n        else if(conditions.contains(\"limit\"))"
+"\n        {"
+"\n            String[] segments=conditions.split(\"limit\");"
+"\n            conditions=segments[0];"
+"\n        }"
+"\n"
+"\n        Connection conn=MySqlDBHelper.getInstance().getConnection();"
+"\n        Statement st = null;"
+"\n        ResultSet rs = null;"
+"\n        try { "
+"\n        st = conn.createStatement();"
+"\n        rs = st.executeQuery(\"SELECT count(*) from \"+tablename+\" where \"+conditions);"
+"\n            while (rs.next()) {"
+"\n                return rs.getInt(1);"
+"\n            }"
+"\n        } catch (SQLException ex) {"
+"\n            Logger.getLogger([tableCapsPlural].class.getName()).log(Level.SEVERE, null, ex);"
+"\n            ex.printStackTrace();"
+"\n        }"
+"\n        return null;"
+"\n    }"
+"\n    public static RecordList select(String conditions)"
+"\n    {"
+"\n        if(conditions.isEmpty())conditions = \"1\";"
+"\n        Connection conn=MySqlDBHelper.getInstance().getConnection();"
+"\n        Statement st = null;"
+"\n        ResultSet rs = null;"
+"\n        try { "
+"\n            st = conn.createStatement();"
+"\n                rs = st.executeQuery(\"SELECT * from \"+tablename+\" where \"+conditions);"
+"\n"
+"\n            RecordList items=new RecordList();"
+"\n            while (rs.next()) {"
+"\n                items.add(new [tableCapsPlural](rs));"
+"\n                    //items.put(rs."+rsGetterFor(idfieldtype)+"(\""+idfield+"\"), new [tableCapsPlural](rs));"
+"\n            }"
+"\n            return items;"
+"\n        } catch (SQLException ex) {"
+"\n            Logger.getLogger([tableCapsPlural].class.getName()).log(Level.SEVERE, null, ex);"
+"\n            ex.printStackTrace();"
+"\n            return null;"
+"\n        }"
+"\n    }"
+"\n"
+"\n    //-----------database helper functions--------------"
+"\n    public static String implodeValues([tableCapsPlural] item,boolean withId)"
+"\n    {"
+"\n            ArrayList<String> values=item.implodeFieldValuesHelper(withId);"
+"\n            String output=\"\";"
+"\n            for(String value:values)"
+"\n            {"
+"\n                    if(!output.isEmpty())"
+"\n                            output+=\",\";"
+"\n                    output+=(value!=null?\"'\"+value+\"'\":\"null\");"
+"\n            }"
+"\n            return output;"
+"\n    }"
+"\n    public static String implodeFields(boolean withId)"
+"\n    {"
+"\n            String output=\"\";"
+"\n            for(String field:fields)"
+"\n            {"
+"\n                    if(!withId && field.contentEquals(\""+idfield+"\"))continue;"
+"\n                    if(!output.isEmpty())"
+"\n                            output+=\",\";"
+"\n                    output+=field;"
+"\n            }"
+"\n            return output;"
+"\n    }"
+"\n    public static String implodeFieldsWithValues([tableCapsPlural] item,boolean withId)"
+"\n    {"
+"\n            ArrayList<String> values=item.implodeFieldValuesHelper(true);//get entire list of values; whether the id is included will be dealt with later."
+"\n"
+"\n            if(values.size()!=fields.length)"
+"\n            {"
+"\n                    System.err.println(\"[tableCapsPlural]:implodeFieldsWithValues(): ERROR: values length does not match fields length\");"
+"\n            }"
+"\n"
+"\n            String output=\"\";"
+"\n            for(int i=0;i<fields.length;i++)"
+"\n            {"
+"\n                    if(!withId && fields[i].contentEquals(\""+idfield+"\"))continue;"
+"\n                    if(!output.isEmpty())"
+"\n                            output+=\",\";"
+"\n                    output+=fields[i]+\"=\"+(values.get(i)!=null?\"'\"+values.get(i)+\"'\":\"null\");"
+"\n            }"
+"\n            return output;"
+"\n    }	"
+"\n    public static String implodeFieldsWithTypes()"
+"\n    {"
+"\n            String output=\"\";"
+"\n            for(int i=0;i<fields.length;i++)"
+"\n            {"
+"\n                    if(fields[i].contentEquals(fields[0]))//fields[0] being the primary key"
+"\n                            output+=fields[i]+\" \"+fieldtypes[i]+\" PRIMARY KEY\";"
+"\n                    else"
+"\n                            output+=\",\"+fields[i]+\" \"+fieldtypes[i];"
+"\n            }"
+"\n            return output;"
+"\n    }	"
+"\n    public static String createTable()"
+"\n    {"
+"\n            return \"CREATE TABLE IF NOT EXISTS \"+tablename+\" (\"+implodeFieldsWithTypes()+\" );\";"
+"\n    }"
+"\n    public static String deleteTable()"
+"\n    {"
+"\n            return \"DROP TABLE IF EXISTS \"+tablename;"
+"\n    }"
+"\n    public static class RecordList extends ArrayList<[tableCapsPlural]>{"
+"\n        public static RecordList fromJsonString(String resultstring) throws IOException"
+"\n        {"
+"\n            return JsonHelper.mapper.readValue(resultstring, RecordList.class);"
+"\n        }"
+"\n        public String toEscapedJsonString() throws IOException"
+"\n        {"
+"\n            return \"\\\"\"+JsonHelper.mapper.writeValueAsString(this).replace(\"\\\"\", \"\\\\\\\"\") +\"\\\"\";"
+"\n        }"
+"\n    }"
+"\n    public static void main(String args[])"
+"\n    {"
+"\n        String database=\""+database+"\";"
+"\n        String url = \"jdbc:mysql://"+hostname+":3306/\"+database+\"?zeroDateTimeBehavior=convertToNull\";"
+"\n        String username=\""+username+"\";"
+"\n        String password = \""+password+"\";"
+"\n"
+"\n        boolean result=MySqlDBHelper.init(url, username, password);            "
+"\n"
+"\n        RecordList items=[tableCapsPlural].select(\"\");"
+"\n        for([tableCapsPlural] item:items)"
+"\n        {"
+"\n            System.out.println(item);"
+"\n        }"
+"\n        System.out.println([tableCapsPlural].count(\"\"));"
+"\n    } "
+"\n}"
+"\n";